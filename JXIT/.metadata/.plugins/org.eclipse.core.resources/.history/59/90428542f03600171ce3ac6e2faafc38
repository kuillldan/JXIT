package actions;

import java.io.IOException;
import java.lang.reflect.Method;
import java.text.MessageFormat;
import java.util.Enumeration;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jspsmart.upload.SmartUpload;

import utils.BeanOperator;
import utils.StringUtils;

@SuppressWarnings("serial")
public abstract class DispatcherServlet extends HttpServlet
{

	private ResourceBundle pageResource;
	private ResourceBundle messageResource;

	@Override
	public void init(ServletConfig config) throws ServletException
	{
		super.init(config);
		Locale locale = Locale.getDefault();
		this.pageResource = ResourceBundle.getBundle("Pages", locale);
		this.messageResource = ResourceBundle.getBundle("Messages", locale);
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
	{
		this.doPost(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,
			IOException
	{
		try
		{
			this.handleParameter(request, response);
			String methodName = this.getMethodName(request);
			Method method = this.getClass().getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);
			String pageKey = (String) method.invoke(this, request, response);
			request.getRequestDispatcher(this.pageResource.getString(pageKey)).forward(request, response);
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	private String getMethodName(HttpServletRequest request)
	{
		String uri = request.getRequestURI();
		return uri.substring(uri.lastIndexOf("/") + 1);
	}

	protected String setPathAndMessage(HttpServletRequest request, HttpServletResponse response, String path,
			String message)
	{
		request.setAttribute("msg", MessageFormat.format(this.messageResource.getString(message), this.getObjectName()));
		request.setAttribute("url", this.pageResource.getString(path));
		return "forward.page";
	}

	protected abstract String getObjectName();

	public void handleParameter(HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		Enumeration<String> parameterNames = null;
		if(this.isEncrypted(request))
		{
			//数据已经封装
			SmartUpload smart = new SmartUpload();
			smart.initialize(super.getServletConfig(), request, response);
			smart.upload();
			parameterNames = smart.getRequest().getParameterNames(); 
		}
		else
		{
			parameterNames = request.getParameterNames();
		}
		while (parameterNames.hasMoreElements())
		{
			String parameterName = parameterNames.nextElement();
			
			if (parameterName.contains("."))
			{
				if(this.isEncrypted(request))
				{
					数据已经封装
					SmartUpload smart1 = new SmartUpload();
					smart1.initialize(super.getServletConfig(), request, response);
					smart1.upload();
				}
				Object value = request.getParameter(parameterName);
				BeanOperator bo = new BeanOperator(this, parameterName, );
				bo.handleString();
				bo.setValue();
			}
		}
	}
	
	private boolean isEncrypted(HttpServletRequest request)
	{
		request.getContentType().contains("multipart/form-data")
	}
}
