package utils;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class BeanOperator
{
	private Object rootObject;
	private String property;
	private Object value;

	private Object currentObject;
	private String lastFieldName;
	private Field lastField;

	public BeanOperator(Object rootObject, String property, Object value)
	{
		super();
		this.rootObject = rootObject;
		this.property = property;
		this.value = value;
	}

	private void handleString() throws Exception
	{
		this.currentObject = this.rootObject;
		String[] propertiesInArray = property.split("\\.");
		for (int i = 0; i < propertiesInArray.length - 1; i++)
		{
			Method getter = this.currentObject.getClass().getDeclaredMethod(propertiesInArray[i]);
			this.currentObject = getter.invoke(this.currentObject);
		}
		this.lastFieldName = propertiesInArray[propertiesInArray.length - 1];
		this.lastField = this.currentObject.getClass()
				.getDeclaredField(propertiesInArray[propertiesInArray.length - 1]);
	}

	private void setValue() throws Exception
	{
		String lastFieldTypeName = this.lastField.getType().getSimpleName();
		Method setter = this.currentObject.getClass().getDeclaredMethod(
				"set" + StringUtils.initCap(this.lastFieldName), this.lastField.getType());

		if (!lastFieldTypeName.contains("[]"))
		{
			if ("String".equalsIgnoreCase(lastFieldTypeName))
			{
				if (!StringUtils.isEmpty(this.value.toString()))
				{
					setter.invoke(this.currentObject, this.value);
				}
			}
		} else
		{
		}
	}
}