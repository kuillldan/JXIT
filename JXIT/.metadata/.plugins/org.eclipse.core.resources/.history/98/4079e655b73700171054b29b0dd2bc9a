package main;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.annotation.*;
import java.lang.reflect.*;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.Arrays;
import java.util.ResourceBundle;

import utils.BeanOperator;
import utils.StringUtils; 
import vo.Employee;

class MyClassLoader extends ClassLoader
{
	public Class<?> getClass(String className) throws Exception
	{
		byte[] classInBytes = null;

		String simpleName = className.substring(className.lastIndexOf(".") + 1);
		String classURI = "C:\\D\\JXIT\\temp\\" + simpleName + ".class";
		File classFile = new File(classURI);
		InputStream is = new FileInputStream(classFile);
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int len = 0;
		while ((len = is.read(buffer)) > -1)
		{
			bos.write(buffer, 0, len);
		}
		classInBytes = bos.toByteArray();
		is.close();
		bos.close();

		return super.defineClass(className, classInBytes, 0, classInBytes.length);
	}
	
	
	public Class<?> getRemoteClass(String className) throws Exception
	{
		byte[] classInBytes = null;

		String simpleName = className.substring(className.lastIndexOf(".") + 1); 
		URL url = new URL("http://192.168.1.103:8080/ClassServer/allClasses/" + simpleName + ".class");
		URLConnection conn = url.openConnection();
		InputStream is = conn.getInputStream();
		
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int len = 0;
		while ((len = is.read(buffer)) > -1)
		{
			bos.write(buffer, 0, len);
		}
		classInBytes = bos.toByteArray();
		is.close();
		bos.close();

		return super.defineClass(className, classInBytes, 0, classInBytes.length);
	}
}

public class Hello
{
	public static void main(String[] args) throws Exception
	{
		MyClassLoader myLoader = new MyClassLoader();
		Class<?> companyClass = myLoader.getRemoteClass("vo.Company");
		System.out.println(companyClass.newInstance());
		
		System.out.println("//Main done~~~");
	}

	public static void printDeclaredMethods(String className) throws ClassNotFoundException
	{
		Class<?> bookClass = Class.forName(className);
		Method[] allMethods = bookClass.getDeclaredMethods();
		for (int i = 0; i < allMethods.length; i++)
		{
			Method method = allMethods[i];
			StringBuffer methodString = new StringBuffer();
			methodString.append(Modifier.toString(method.getModifiers())).append(" ");
			Class<?> returnType = method.getReturnType();
			methodString.append(returnType.getSimpleName()).append(" ");
			methodString.append(method.getName());
			methodString.append("(");

			Class<?>[] parameterTypes = method.getParameterTypes();
			for (int j = 0; j < parameterTypes.length; j++)
			{
				methodString.append(parameterTypes[j].getSimpleName()).append(" args").append(j);

				if (j < parameterTypes.length - 1)
				{
					methodString.append(", ");
				}
			}

			methodString.append(")");

			Class<?>[] allExceptionTypes = method.getExceptionTypes();
			if (allExceptionTypes != null && allExceptionTypes.length > 0)
			{
				methodString.append("throws ");
				for (int k = 0; k < allExceptionTypes.length; k++)
				{
					methodString.append(allExceptionTypes[k].getSimpleName());
					if (k < allExceptionTypes.length - 1)
					{
						methodString.append(", ");
					}
				}
			}

			System.out.println(methodString);
		}
	}

	public static void printConstructors(String className) throws ClassNotFoundException
	{
		Class<?> bookClass = Class.forName(className);
		Constructor<?>[] allConstructors = bookClass.getConstructors();
		for (int i = 0; i < allConstructors.length; i++)
		{
			Constructor<?> cons = allConstructors[i];
			StringBuffer conString = new StringBuffer();
			conString.append(Modifier.toString(cons.getModifiers())).append(" ");
			conString.append(cons.getName()).append("(");
			Class<?>[] allParameterTypes = cons.getParameterTypes();
			for (int j = 0; j < allParameterTypes.length; j++)
			{
				conString.append(allParameterTypes[j].getSimpleName()).append(" args").append(j);
				if (j < allParameterTypes.length - 1)
				{
					conString.append(", ");
				}
			}

			conString.append(")");

			Class<?>[] allExceptions = cons.getExceptionTypes();
			if (allExceptions != null && allExceptions.length > 0)
			{
				conString.append("throws ");
				for (int k = 0; k < allExceptions.length; k++)
				{
					conString.append(allExceptions[k].getSimpleName());
					if (k < allExceptions.length - 1)
					{
						conString.append(", ");
					}
				}
			}

			System.out.println(conString);
		}
	}
}